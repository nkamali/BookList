import React, { Component } from 'react';
import { connect } from 'react-redux'; // import connect function from react-redux
import { selectBook } from '../actions/index';

// used to make sure actions generated by action creator flows through all reducers in application
import { bindActionCreators } from 'redux'; 

// BookList component has been promoted to a container so that it is aware of the state.
// A container is a normal react component that gets binded to the application state.
// Whenever the application state changes, the component will be re-rendered as well.
// The way it was promoted to a container is first by importing the 'connect' function above.
// Then the mapStateToProps function was defined below.
// Then we connect our component BookList to mapStateToProps function via the 'connect' function.
class BookList extends Component {
  renderList() {
    return this.props.books.map((book) => {
      return (
        <li onClick={() => this.props.selectBook(book)} 
            key={book.title} 
            className="list-group-item">
            {book.title}
        </li>
      );
    });
  }

  render() {
    return (
      <ul className="list-group col-sm-4">
        {this.renderList()}
      </ul>
    )
  }
}

// This function is the glue between react and redux
// Whenever our application state changes, this container BookList
// will instantly re-render with a new list of books.
function mapStateToProps(state) {
  // Whatever is returned will show up as props
  // inside of BookList
  return {
    books: state.books
  };
}

// Anything returned from this function will end up as props 
// on the BookList container.
function mapDispatchToProps(dispatch) {
  // Whenever selectBook is called, the result should be passed
  // to all our reducers. selectBook is just a plain function that returns an object.
  // The dispatch function takes all of these actions and retrieves them and funnels them
  // to all reducers within the application. Only the reducers care about what to do with those actions.
  return bindActionCreators({ selectBook: selectBook }, dispatch);
}

// connect takes a function and a component and produces a container.
// The container is a component that is aware of the state that's contained by Redux.
// Whenever the application state changes, the object in the state function will be 
// assigned as props in the component. 
// Promote BookList from component to a container - it needs to know about this 
// new dispatch method, selectBook. Make it available as a prop.
export default connect(mapStateToProps, mapDispatchToProps)(BookList); 